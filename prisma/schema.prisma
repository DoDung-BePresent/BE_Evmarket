generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}
generator dbml {
  provider = "prisma-dbml-generator"
  output = "erd"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ENUMS
enum UserRole {
  MEMBER
  STAFF
  ADMIN
}

enum AccountType {
  OAUTH
  CREDENTIALS
}

enum Provider {
  GOOGLE
  CREDENTIALS
}

enum ListingType {
  VEHICLE
  BATTERY
}

enum ListingStatus {
  AVAILABLE
  SOLD
  DELISTED
  AUCTION_LIVE
  AUCTION_ENDED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum FinancialTransactionType {
  DEPOSIT
  WITHDRAWAL
  PURCHASE
  AUCTION_DEPOSIT
  AUCTION_RELEASE
}

enum PaymentGateway {
  WALLET
  MOMO
}

// MODELS
model User {
  id              String        @id @default(cuid())
  email           String        @unique
  name            String?
  avatar          String?
  role            UserRole      @default(MEMBER)
  isVerified      Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  accounts        Account[]
  vehicles        Vehicle[]
  batteries       Battery[]
  transactions    Transaction[]
  reviews         Review[]
  wallet          Wallet?
  bids            Bid[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              AccountType
  provider          Provider
  providerAccountId String

  password          String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Vehicle {
  id              String   @id  @default(cuid())
  title           String
  description     String
  price           Float
  images          String[]      @default([])
  status          ListingStatus @default(AVAILABLE)

  // Vehicle specific details
  brand           String
  model           String
  year            Int
  mileage         Int // in kilometers
  specifications  Json?

  isAuction       Boolean   @default(false)
  auctionEndsAt   DateTime?
  startingPrice   Float?
  bidIncrement    Float?    // Bước giá
  depositAmount   Float?    // Tiền cọc

  isVerified      Boolean       @default(false) // Verified by Admin
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  sellerId        String
  seller          User          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  transactions    Transaction[]
  bids            Bid[]
}

model Battery {
  id              String        @id @default(cuid())
  title           String
  description     String
  price           Float
  images          String[]      @default([])
  status          ListingStatus @default(AVAILABLE)

  // Battery specific details
  brand           String
  capacity        Float // in kWh
  year            Int
  health          Float? // in percentage
  specifications  Json?

  isAuction       Boolean   @default(false)
  auctionEndsAt   DateTime?
  startingPrice   Float?
  bidIncrement    Float?
  depositAmount   Float?

  isVerified      Boolean       @default(false) // Verified by Admin
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  sellerId        String
  seller          User          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  transactions    Transaction[]
  bids            Bid[]
}

model Transaction {
  id              String   @id @default(cuid())
  buyerId         String
  buyer           User     @relation(fields: [buyerId], references: [id])
  status          TransactionStatus @default(PENDING)

  vehicleId       String?
  vehicle         Vehicle? @relation(fields: [vehicleId], references: [id])

  batteryId       String?
  battery         Battery? @relation(fields: [batteryId], references: [id])

  paymentGateway  PaymentGateway?
  paymentDetail   Json?

  review          Review? // A transaction can have one review

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([buyerId])
  @@index([vehicleId])
  @@index([batteryId])
}

model Bid {
  id          String      @id @default(cuid())
  amount      Float
  createdAt   DateTime    @default(now())

  bidderId    String
  bidder      User        @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  // Relations (polymorphic)
  vehicleId String?
  vehicle   Vehicle?      @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  batteryId String?
  battery   Battery?      @relation(fields: [batteryId], references: [id], onDelete: Cascade)

  @@index([bidderId])
  @@index([vehicleId])
  @@index([batteryId])
}

model Wallet {
  id                      String    @id @default(cuid())
  userId                  String    @unique
  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  availableBalance        Float     @default(0)
  lockedBalance           Float     @default(0)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  financialTransactions   FinancialTransaction[]
}

model FinancialTransaction {
  id              String                    @id @default(cuid())
  walletId        String
  wallet          Wallet                    @relation(fields: [walletId], references: [id])
  type            FinancialTransactionType
  amount          Float
  status          TransactionStatus
  gateway         PaymentGateway
  gatewayTransId  String?                   @unique // e.g., MoMo's transId
  description     String?
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt

  @@index([walletId])
}

model Review {
  id            String   @id @default(cuid())
  rating        Int // 1 to 5
  comment       String?
  mediaUrls     String[] @default([])
  hasBeenEdited Boolean  @default(false)

  transactionId String   @unique // Each transaction can only have one review
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  reviewerId    String
  reviewer      User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([reviewerId])
}