generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}
generator dbml {
  provider = "prisma-dbml-generator"
  output = "erd"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ENUMS
enum UserRole {
  MEMBER
  ADMIN
}

enum AccountType {
  OAUTH
  CREDENTIALS
}

enum Provider {
  GOOGLE
  FACEBOOK
  CREDENTIALS
}

enum ListingStatus {
  AVAILABLE
  SOLD
  DELISTED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

// MODELS
model User {
  id              String        @id @default(cuid())
  email           String        @unique
  name            String?
  avatar          String?
  role            UserRole      @default(MEMBER)
  isVerified      Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  accounts        Account[]
  vehicles        Vehicle[]
  batteries       Battery[]
  transactions    Transaction[]
  reviews         Review[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              AccountType
  provider          Provider
  providerAccountId String

  password          String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Vehicle {
  id              String   @id  @default(cuid())
  title           String
  description     String
  price           Float
  images          String[]      @default([])
  status          ListingStatus @default(AVAILABLE)

  // Vehicle specific details
  brand           String
  model           String
  year            Int
  mileage         Int // in kilometers
  specifications  Json?

  isVerified      Boolean       @default(false) // Verified by Admin
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  sellerId        String
  seller          User          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  transactions    Transaction[]
}

model Battery {
  id              String        @id @default(cuid())
  title           String
  description     String
  price           Float
  images          String[]      @default([])
  status          ListingStatus @default(AVAILABLE)

  // Battery specific details
  brand           String
  capacity        Float // in kWh
  year            Int
  health          Float? // in percentage
  specifications  Json?

  isVerified      Boolean       @default(false) // Verified by Admin
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  sellerId        String
  seller          User          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  transactions    Transaction[]
}

model Transaction {
  id        String   @id @default(cuid())
  buyerId   String
  buyer     User     @relation(fields: [buyerId], references: [id])
  status    TransactionStatus @default(PENDING)

  vehicleId String?
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])

  batteryId String?
  battery   Battery? @relation(fields: [batteryId], references: [id])

  review    Review? // A transaction can have one review

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([buyerId])
  @@index([vehicleId])
  @@index([batteryId])
}

model Review {
  id            String   @id @default(cuid())
  rating        Int // 1 to 5
  comment       String?
  mediaUrls     String[] @default([])
  hasBeenEdited Boolean  @default(false)

  transactionId String   @unique // Each transaction can only have one review
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  reviewerId    String
  reviewer      User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([reviewerId])
}